import csv
import pickle

def build_f_filename_map(Dir, f_filename_map):
	with open(Dir,'rb') as f:
		reader = csv.reader(f)
		next(reader, None)
		for row in reader:
			row_data = []
			for i in row[1:]:
				row_data.append(float(i))
			f_filename_map[row[0]] = row_data
	f.close()


#Given a single csv file about label, read it 
#and build input array Y for fitting, as well as maps.
def build_l_filename_map(Dirl, l_filename_map):
	with open(Dirl,'rb') as f:
		reader = csv.reader(f)
		i = 0
		for row in reader:
			if row[1] in l_filename_map:
				l_filename_map[row[1]].append(row[0])
			else:
				l_filename_map[row[1]] = [row[0]]
	f.close()

def save(model, file_name):
	with open(file_name, 'wb') as output:
		pickle.dump(model, output, pickle.HIGHEST_PROTOCOL)

def build_feature_map(feature_m):
	with open('../../data/raw_csv/1_features.csv','rb') as f:
		first_line = f.readline().split(",")
		j = 0
		for i in first_line[1:]:
			if "\n" in i:
				i = i[:-1]
			feature_m[j] = i
			j += 1
	f.close()
	
def get_average(f_filename_map,l_filename_map,avg_map):
	for key in l_filename_map:
		target_files = l_filename_map[key]
		avg_list = [0] * len(f_filename_map[target_files[0]])
		for file_name in target_files:
			avg_list = [x + y for x, y in zip(avg_list, f_filename_map[file_name])]
		for i in range(len(avg_list)):
			value = avg_list[i]/ len(target_files)
			value = int(value*100+0.5)/100.0
			avg_list[i] = value
		avg_map[key] = avg_list
		

def prepro():
	feature_m = dict()
	f_filename_map = dict()
	l_filename_map = dict()
	avg_map = dict()
	for i in range(1,8):
		dirm = '../../data/raw_csv/%s_features.csv' % str(i)
		dirl = '../../data/raw_csv/%s_label.csv' % str(i)
		build_f_filename_map(dirm, f_filename_map)
		build_l_filename_map(dirl, l_filename_map)
	build_feature_map(feature_m)
	get_average(f_filename_map,l_filename_map,avg_map)
	for key in avg_map:
		print key,'with ............',avg_map[key]
    
	save(avg_map,'../../data/maps/avg_map.pkl')
	save(f_filename_map, '../../data/maps/f_filename_map.pkl')
	save(l_filename_map, '../../data/maps/l_filename_map.pkl')
	save(feature_m, '../../data/maps/feature_indextoname_map.pkl')


prepro()