from sklearn import tree
from sklearn import preprocessing
import numpy
import csv
import pickle
import time
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.linear_model import RandomizedLasso


#Given a single csv about features, 
#build the feature vectors X.
def openMetrics(Dir, X):
	with open(Dir,'rb') as f:
		reader = csv.reader(f)
		next(reader, None)
		for row in reader:
			row_data = []
			for i in row[1:]:
				row_data.append(float(i))
			X.append(row_data)
	f.close()


#Given a single csv file about label, read it 
#and build input array Y for fitting, as well as maps.
def openLabel(Dirl, Y, m, m_label):
	with open(Dirl,'rb') as f:
		reader = csv.reader(f)
		i = 0
		for row in reader:
			if row[1] in m:
				Y.append(m.get(row[1]))
			else:
				m[row[1]] = i
				m_label[i] = row[1]
				i+=1
				Y.append(m.get(row[1]))
	f.close()


#Function to build the map whose key is feature name and value is a unique integer
def build_map(m_feature):
	with open('../../data/raw_csv/1_features.csv','rb') as f:
		first_line = f.readline().split(",")
		j = 0
		for i in first_line[1:]:
			if "\n" in i:
				i = i[:-1]
			m_feature[i] = j
			j += 1
	f.close()

# X = numpy.log(1 + X)
# X = preprocessing.scale(X)






#Function used to save object to a pickle file
def save(model, file_name):
	with open(file_name, 'wb') as output:
		pickle.dump(model, output, pickle.HIGHEST_PROTOCOL)




#Train the models and save them as pickle file
def train():
	X = []
	Y = []
	m = dict()
	m_label = dict()
	m_feature = dict()

	# Generate input (X, Y) for the model as well as maps (m, m_label) for further use.
	for i in range(1,8):
		dirm = '../../data/raw_csv/%s_features.csv' % str(i)
		dirl = '../../data/raw_csv/%s_label.csv' % str(i)
		openMetrics(dirm, X)
		openLabel(dirl, Y, m, m_label)

	

	# Fit and train models
	#Train the randomized_lasso
	r_Lasso = RandomizedLasso(max_iter = 50)
	r_Lasso.fit(X, Y)

	#Train the random_forest
	forest = ExtraTreesClassifier(n_estimators=250, random_state=0)
	forest.fit(X, Y)
	

	build_map(m_feature)
	
	#Save trained models and maps as pickle files.
	save(m_feature, '../../data/maps/feature_map.pkl')
	save(forest, '../../data/models/random_forest.pkl')
	save(m_label,'../../data/maps/get_label_map.pkl')
	save(r_Lasso, '../../data/modelss/randomized_lasso.pkl')

if __name__ == '__main__':
	train()
	print "Done with model training"
