    function generate_data(data)
    {
      var name = [], min = [], max = [],
          step = [];
      for(var i = 0; i < data.length; i++)
      {
        var featureObj = data[i];
        name[i] = Object.keys(featureObj)[0];
        min[i] = featureObj[name[i]].min;
        max[i] = featureObj[name[i]].max;
        step[i] = featureObj[name[i]].step;
      }
      $("#feature").html("");
      generate_slide(data.length, name, min, max, step);
      //labels
      $('.labels').on('click', function(){
        $("#predict").addClass('disabled');
        var label_name = $(this).prop("name");
        $(function(){
          $.getJSON("/random_sample", {
            label: label_name
          }, function(data) {
            
            for(var i = 0; i < Object.keys(data[0]).length; i++)
            {
              var id = $("div[name='slider_" + Object.keys(data[0])[i] + "']").attr("id");
              var j = id.substring(6, 11);
              var default_value = data[0][Object.keys(data[0])[i]];
              var avg_value = data[1][Object.keys(data[1])[i]];
              var default_value_string = default_value.toString().split(".");
              var avg_value_string = avg_value.toString().split(".");
              
              if (d3.select("#box" + j).select("h2").text().includes("histogram"))
              {
                final_default_value_string = parseInt(default_value_string[0]);
                final_avg_value_string = parseInt(avg_value_string[0]);
              }
              else
              {
                final_default_value_string = parseFloat(default_value_string[0] 
                                         + "." 
                                         + default_value_string[1]).toExponential(3);
                final_avg_value_string = parseFloat(avg_value_string[0]
                                        + "."
                                        + avg_value_string[1]).toExponential(3);
              }
              
              $('span[name=feature_value' + j + ']').text(final_default_value_string);
              $('span[name=feature_value_avg' + j + ']').text(final_avg_value_string);
              d3.select("#slider" + j).remove();
              d3.select("#box" + j).append("div").attr("id", "slider"+ j).attr("name", "slider_" + Object.keys(data[0])[i]);
              displaySlider(min[j], max[j], step[j], j , default_value);
            }
            $("#predict").removeClass('disabled');
            $('#myModal').modal('hide');
          });
        });
      });
    
       $("#random_value").click(function(){
         for(var i = 0; i < data.length; i++)
        {
          var random_value = step[i] * (Math.random() * (max[i] - min[i]) / (parseFloat(step[i]) + 0.001)) + min[i];
          var random_value_string = random_value.toString().split(".");
          if (d3.select("#box" + i).select("h2").text().includes("histogram"))
          {
            final_random_value_string = parseInt(random_value_string[0]);
          }
          else
          {
            final_random_value_string = parseFloat(random_value_string[0] 
                                     + "." 
                                     + random_value_string[1]).toExponential(3);
          }
          $('span[name=feature_value' + i + ']').text(final_random_value_string);
          var slider_name = d3.select("#slider" + i).attr("name");
          d3.select("#slider" + i).remove();
          d3.select("#box" + i).append("div").attr("id", "slider"+ i).attr("name", slider_name);
          displaySlider(min[i], max[i], step[i], i , random_value);
        }
      });
    }
    
    function set_slider_color(i)
    {
      var colorRange = ["rgba(44,123,182,1)","rgba(0,166,202,1)","rgba(0,204,188,1)",
      "rgba(144,235,157,1)","rgba(255,255,140,1)","rgba(249,208,87,1)","rgba(242,152,46,1)","rgba(232,104,24,1)","rgba(215,25,28,1)"];
      var colorRangeLen = colorRange.length;
      var currentColorRange = "";
        if (i < 10)
        {
          currentColorRange = colorRange[0];
          for (var j = 0; j < colorRangeLen; j++)
          {
            currentColorRange = currentColorRange + "," + colorRange[j];
          }
        }
        else
        {
            currentColorRange = colorRange[colorRangeLen - 3];
            for (var j = colorRangeLen - 2; j < colorRangeLen; j++)
            {
              currentColorRange = currentColorRange + "," + colorRange[j];
            }
        }
        
        var slider = d3.select("#slider" + i);
        slider.style("background", "-webkit-linear-gradient(left," + currentColorRange + ")");
        slider.style("background", "-o-linear-gradient(right," + currentColorRange + ")");
        slider.style("background", "-moz-linear-gradient(right," + currentColorRange + ")");
        slider.style("background", "linear-gradient(to right," + currentColorRange + ")");
    }
    
    function generate_slide(length, name, min, max, step){
      for(var i = 0; i < length; i++)
      {
        // append each feature to dom
        var box = d3.select("#feature")
                  .append("div")
                  .attr("id", "box" + i) // add separating boxes
                  .attr("name", "box_" + name[i])
                  .attr("class", "lazyloading")
                  .style("border", "solid lightgrey")
                  .style("border-radius", "20px")
                  .style("margin", "2px")
                  .style("padding", "30px");
        var feature = d3.select("#box"  + i);
        feature.append("h2")
        .attr("name", "feature_name" + i)
        .attr("id", "feature_name" + i)
        .attr("class", "pull-left")
        .text(name[i]);
        
        feature.append("h2")
        .attr("class", "pull-right")
        .text("Avg: ")
        .append("span")
        .attr("name", "feature_value_avg" + i)
        .attr("id", "feature_value_avg" + i)
        .text(0);
        
        
        if (d3.select("#box" + i).select("h2").text().includes("histogram")&& min[i] < 1)
        {
          min[i] = Number(0);
        }
        feature.append("h2")
        .attr("class", "cleanfix")
        .text("Value: ")
        .append("span")
        .attr("name", "feature_value" + i)
        .attr("id", "slider" + i +"text")
        .text(min[i]);
        
        feature.append("div")
        .attr("id", "slider"+ i)
        .attr("name", "slider_" + name[i]);
        
        displaySlider(min[i],max[i],step[i],i, min[i]);
      }
      
      $("#generate_random").click(function(){
        generate_random(random_value, data.length);
      });
    
      //click predict button
      $("#predict").click(function(){
          if (data_predict_model === undefined){
            alert("This model can not predict");
          }else{
            $("#pred_label").css("visibility", "hidden");
            $("#fa-spin").css("visibility", "visible");
            // console.log(data_predict_model);
            eval_data(length);
          }
        });
    }
    function render_random()
    {
      // console.log("render_random");
      $(function(){
        $.getJSON("/ranking", {
          sort_type: "random_forests"
        }, function(data) {
          // console.log("getting random ranking");
          generate_data(data);
        });
      });  
    }
    
    function render_lasso()
    {
      // console.log("render_lasso");
      $(function(){
        $.getJSON("/ranking", {
          sort_type: "lasso"
        }, function(data) {
          // console.log("getting lasso ranking");
          generate_data(data);
        });
      });  
    }
    
    function render(sort_type){
    //clear elements in #feature tag
    $('#feature').html('');
    // console.log("clear");
      switch (sort_type)
      {
        case "random_forests":
          render_random();
          break;
        case "lasso":
          render_lasso();
          break;
      }
    }
    
    //Get data and transfer it to decision tree
    function eval_data(length)
    {
       var name = [];
       var value = [];
       
       for(var i = 0; i < length; i++)
       {
         name.push($('h2[name=feature_name' + i + ']').text());
         value.push($('span[name=feature_value' + i + ']').text());
       }
      // console.log(JSON.stringify(name))
      // console.log(value);
      alert($("a:contains('" + $('#model_selected').text() + "')").parent());
      
        $.post('/eval', {
          
          feature_name: JSON.stringify(name),
          feature_value: JSON.stringify(value),
          model_name: JSON.stringify($('#model_selected').text()),
          model_url: JSON.stringify($("a:contains('" + $('#model_selected').text() + "')").parent())
        }, function(data) {
          // console.log(data);
          $("#fa-spin").css("visibility", "hidden");
          $("#pred_label").css("visibility", "visible");
          $("#pred_label").text(data);
        },'json');
    }
    
    function displaySlider(min,max,step,i, start_value){
      set_slider_color(i);
      d3.select("#slider" +i).call(d3.slider().axis(true).min(min).max(max).value(start_value).step(step).on("slide", function(evt, value) {
          final_value_patten = value.toString().split(".");
          
          if (d3.select("#box" + i).select("h2").text().includes("histogram"))
          {
            final_value = parseInt(final_value_patten[0]);
          }
          else
          {
            final_value = parseFloat(final_value_patten[0] 
                                     + "." 
                                     + final_value_patten[1]).toExponential(3);
          }
          d3.select("#slider"+ i +"text").text(final_value);
        }));
    }
    
    var update_ranking = function(path){
      $(function(){
        $.getJSON("/ranking", {
          filename: path
        }, function(data) {
          // console.log("getting random ranking");
          generate_data(data);
        });
      });  
    };
    // when page loads, get default ranking
    $(document).ready(update_ranking("forests_ranking_25.pkl"));
    // render("default");
    // ranking button 
    $("#random_forests").click(function(){
      render("random_forests");
      // console.log("random_forests");
    });
    $("#lasso").click(function(){
      render("lasso");
    });
    
    //feature ranking
    $('.ranking').on('click', function () {
      var model_name = $(this).text();
      var path = $(this).prop("name");
      update_ranking(path);
    });
    
    var data_predict_model;
    $(".prediction").on('click', function () {
      data_predict_model = $(this).attr("data-predict-model");
    });
    
    // $('body').on('click', '.btn-group button', function (e) {
    //     $(this).addClass('active');
    //     $(this).siblings().removeClass('active');
    //     //do any other button related things
    // });
    
    //change model
    $('.models-dropdown a').click(function(){
      $('#model_selected').text($(this).text());
    });
    //change label
    $('.labels-dropdown a').click(function(){
      $('#label_selected').text($(this).text());
      $('#myModal').modal('toggle');
      console.log("toggle")
      // $("#pred_label").css("visibility", "visible");
      // $("#pred_label").text($(this).text());
    });
    // jquery ui
    $(function() {
      $(document).tooltip();
    });
    
    